{"version":3,"sources":["components/Card/Card.js","components/Wrapper/Wrapper.js","components/Header/Header.js","components/Counter.js","App.js","index.js"],"names":["Card","props","className","onClick","clickCounter","id","alt","name","src","image","Wrapper","children","Header","score","highscore","Counter","state","cards","itsGameOver","setState","console","log","this","forEach","card","count","alert","find","o","i","sort","Math","random","map","key","Component","App","ReactDOM","render","document","getElementById"],"mappings":"6vTAceA,G,MARF,SAAAC,GAAK,OAChB,yBAAKC,UAAU,OAAOC,QAAS,kBAAMF,EAAMG,aAAaH,EAAMI,MAC5D,yBAAKH,UAAU,iBACb,yBAAKI,IAAKL,EAAMM,KAAMC,IAAKP,EAAMQ,YCFxBC,G,MAFC,SAAAT,GAAK,OAAI,yBAAKC,UAAU,WAAWD,EAAMU,YCO1CC,G,MATA,SAAAX,GAAK,OAClB,yBAAKC,UAAU,UACb,yBAAKA,UAAU,SAASD,EAAMU,UAC9B,yBAAKT,UAAU,UAAf,UACUD,EAAMY,MADhB,eACmCZ,EAAMa,c,OCwD9BC,E,4MAtDbC,MAAQ,CACNC,QACAJ,MAAO,EACPC,UAAW,G,EAGbI,YAAc,WAUZ,OATI,EAAKF,MAAMH,MAAQ,EAAKG,MAAMF,WAChC,EAAKK,SAAS,CAAEL,UAAW,EAAKE,MAAMH,QAAS,WAC7CO,QAAQC,IAAIC,KAAKN,MAAMF,cAEzB,EAAKE,MAAMC,MAAMM,SAAQ,SAAAC,GACzBA,EAAKC,MAAQ,KAEfC,MAAM,yBAAD,OAA0B,EAAKV,MAAMH,QAC1C,EAAKM,SAAS,CAAEN,MAAO,KAChB,G,EAITT,aAAe,SAAAC,GACb,EAAKW,MAAMC,MAAMU,MAAK,SAACC,EAAGC,GACxB,GAAID,EAAEvB,KAAOA,EAAI,CACf,GAAuB,IAAnBY,EAAMY,GAAGJ,MASX,OADA,EAAKP,eACE,EARPD,EAAMY,GAAGJ,MAAQR,EAAMY,GAAGJ,MAAQ,EAClC,EAAKN,SAAS,CAAEN,MAAO,EAAKG,MAAMH,MAAQ,IAAK,WAG7C,OAFAO,QAAQC,IAAIC,KAAKN,MAAMH,OACvBS,KAAKN,MAAMC,MAAMa,MAAK,kBAAMC,KAAKC,SAAW,OACrC,U,uDASP,IAAD,OACP,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAQnB,MAAOS,KAAKN,MAAMH,MAAOC,UAAWQ,KAAKN,MAAMF,WAAvD,eACCQ,KAAKN,MAAMC,MAAMgB,KAAI,SAAAT,GAAI,OACxB,kBAAC,EAAD,CACEpB,aAAc,EAAKA,aACnBC,GAAImB,EAAKnB,GACT6B,IAAKV,EAAKnB,GACVI,MAAOe,EAAKf,gB,GAhDF0B,aCAPC,MAJf,WACE,OAAO,kBAAC,EAAD,OCATC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.3ee87f72.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Card.css\";\n\n// If we want a child component to update or pass data to its parent, we can create a method inside the parent for the update\n// Then bind the method to the parent, and pass it to the child as a prop\n\nconst Card = props => (\n  <div className=\"card\" onClick={() => props.clickCounter(props.id)}>\n    <div className=\"img-container\">\n      <img alt={props.name} src={props.image} />\n    </div>\n  </div>\n);\n\nexport default Card;\n","import React from \"react\"; \nimport \"./Wrapper.css\";\n\n// If we want a child component to update or pass data to its parent, we can create a method inside the parent for the update\n// Then bind the method to the parent, and pass it to the child as a prop\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./Header.css\";\n\nconst Header = props => (\n  <div className=\"header\">\n    <div className=\"title\">{props.children}</div>\n    <div className=\"scores\">\n      Score: {props.score} Highscore: {props.highscore}\n    </div>\n  </div>\n);\n\nexport default Header;","import React, { Component } from \"react\";\nimport Card from \"./Card\";\nimport Wrapper from \"./Wrapper\";\nimport Header from \"./Header\";\nimport cards from \"./cards.json\";\n\n// By extending the React.Component class, Counter inherits functionality from it\nclass Counter extends Component {\n  // Setting the initial state of the Counter component\n  state = {\n    cards,\n    score: 0,\n    highscore: 0\n  };\n  //ends the game if score > highscore\n  itsGameOver = () => {\n    if (this.state.score > this.state.highscore) {\n      this.setState({ highscore: this.state.score }, function () {\n        console.log(this.state.highscore);\n      });\n    } this.state.cards.forEach(card => {\n      card.count = 0;\n    });\n    alert(`Game over!!! \\nscore: ${this.state.score}`);\n    this.setState({ score: 0 });\n    return true;\n  };\n\n  // clickcounter handles the counting of the cards and the sort cards operation\n  clickCounter = id => {\n    this.state.cards.find((o, i) => {\n      if (o.id === id) {\n        if (cards[i].count === 0) {\n          cards[i].count = cards[i].count + 1;\n          this.setState({ score: this.state.score + 1 }, function () {\n            console.log(this.state.score);\n            this.state.cards.sort(() => Math.random() - 0.5)\n            return true;\n          });\n        } else {\n          this.itsGameOver();\n          return false;\n        }\n      };\n    });\n  }\n  render() {\n    return (\n      <Wrapper>\n        <Header score={this.state.score} highscore={this.state.highscore}>Llamma Try?</Header>\n        {this.state.cards.map(card => (\n          <Card\n            clickCounter={this.clickCounter}\n            id={card.id}\n            key={card.id}\n            image={card.image}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default Counter;\n","import React from \"react\";\nimport Counter from \"./components/Counter\";\n\nfunction App() {\n  return <Counter />;\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}